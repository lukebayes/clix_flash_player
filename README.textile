h1. CLIX FlashPlayer

This is a Command Line interface to the Flash Player for OS X.

This project was created because unlike the modern distributions of the desktop debug Flash Player on Windows and Linux, the OS X distribution does not behave properly when executed by another process.

h1. The Problem(s)

We need to be able to execute and focus a specific instance of the Flash Player along with a specific SWF file. The Flash Player execution thread should block until the user selects File >> Quit (or hits CMD+Q), or until the parent application is interrupted (SIGINT) using CTRL+C.

The Flash Player should be focused and still terminate whether or not a runtime exception occurs in the first frame (or any frame) of the loaded SWF file.

Our solution should work each revision of the Flash Player, from 9.0.115 and greater.

h1. Attempts

h2. Open command

The first approach was to simply use the OS X <code>open</code> command. The problem with open, is that it expects a single application _or_ file argument, not an application _and_ file. 

When <code>open</code> is sent a second argument, it appears to be the same as if open was called twice - this usually causes two instances of the Flash Player to be launched.

We can't call <code>open</code> with only the SWF file because then it launches an arbitrary Flash Player and not necessarily the specific version that we need.

Finally, <code>open</code> has the additional disadvantage in that when we send SIGINT to the parent process, the child Players are orphaned.

h2. Exec Flash Player.app with the SWF file as an argument

Of course, this doesn't work because Flash Player.app is a directory. Thanks Steve!

h2. Exec Flash Player.app/Contents/MacOS/Flash Player binary with the SWF file as an argument

This approach is the most promising yet in that it blocks the parent thread and returns when the Player is Quit and it kills the Player process when the parent is interrupted.

Unfortunately, this doesn't work for us because the Flash Player is never focused, and actually launches _behind_ all other applications. 

h2. Exec Flash Player.app/Contents/MacOS/Flash Player binary with the SWF file as an argument, and use AppleScript to focus the damn thing

At first blush, this appears to work great, then we encounter the uncaught (actually _uncatchable_) runtime exception...

If the SWF file we send the player has an uncaught runtime exception, our AppleScript process becomes locked, and no longer responds to SIGINT (CTRL+C). The whole mess must instead be sent the SIGSTOP (CTRL+Z) and later killed with SIGKILL (kill -9 [pid]).

h2. AppleScript Wrapper

We can try writing a terminal application using AppleScript that will launch the Flash Player, activate it, and _then_ open the requisite SWF file, which will presumably avoid breakage on runtime exceptions.

This worked great, except using the _osascript_ application to call the AppleScript, apparently breaks the SIGINT relationship from parent to child. So when the parent is aborted, the child is orphaned.

h2. AppleScript Application

Will the AppleScript behave differently as a full OS X _.app_?

This is awesome because the .app file actually throws a modal "Are you sure?" prompt - _behind_ all other applications. It also doesn't seem to accept command line parameters properly.

h2. Use rb-appscript to Launch Flash Player.app, Focus the app, and Open the SWF

This approach seems to work well right up until we get that runtime exception. Seems one of the threads gets blocked and becomes unresponsive.


